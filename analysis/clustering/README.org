#+TITLE: Repeat Clustering
#+DRAWERS: HIDDEN
#+OPTIONS: d:RESULTS ^:nil
#+STARTUP: hideblocks align
#+PROPERTY:  header-args :exports results :eval never-export :mkdirp yes :var DIR=(file-name-directory buffer-file-name)


Sampled reads with reservoir sort at a rate of 1% of genome size. All reads are
cut at 85 base pairs. For each accession, the run with the most trimmed forward
reads was sampled.

#+NAME: lib_table
| Accession | Genome Size (Mb) | Name                                                                                                                                                    |
|-----------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------|
| D6-7.1    |              841 | D6-7.Ggoss1.1,D6-7.Ggoss1.2                                                                                                                             |
| D6-7.2    |              841 | D6-7.Ggoss1.3,D6-7.Ggoss1.4                                                                                                                             |
| D6-7.3    |              841 | D6-7.Ggoss1.5,D6-7.Ggoss1.6                                                                                                                             |
| D1-2.2    |              841 | D1-2.Gthur1.5,D1-2.Gthur1.6                                                                                                                             |
| D1-2.3    |              841 | D1-2.Gthur1.8,D1-2.Gthur1.7                                                                                                                             |
| D6-5      |              841 | D6-5.Ggoss2.1,D6-5.Ggoss2.2,D6-5.Ggoss2.3,D6-5.Ggoss2.4                                                                                                 |
| D1-35     |              841 | D1-35.Gthur2.1,D1-35.Gthur2.2,D1-35.Gthur2.3,D1-35.Gthur2.4,D1-35.Gthur2.5                                                                              |
| D8-9      |              851 | D8-9.Gtril1.1,D8-9.Gtril1.2                                                                                                                             |
| D8-8      |              851 | D8-8.Gtril2.1                                                                                                                                           |
| D2-1-6    |              856 | D2-1-6.Garmo1.1,D2-1-6.Garmo1.2,D2-1-6.Garmo1.3,D2-1-6.Garmo1.4,D2-1-6.Garmo1.5                                                                         |
| D3-K-57   |              880 | D3-K-57.Gklot1.5,D3-K-57.Gklot1.6,D3-K-57.Gklot1.7,D3-K-57.Gklot1.8                                                                                     |
| D3K-56    |              880 | D3K-56.HFJ7YBGXX.1,D3K-56.HFJ7YBGXX.2,D3K-56.HFJ7YBGXX.3,D3K-56.HFJ7YBGXX.4,D3K-56.HHGLTBGXX.1,D3K-56.HHGLTBGXX.2,D3K-56.HHGLTBGXX.3,D3K-56.HHGLTBGXX.4 |
| D5-8.1    |              880 | D5-8.Graim1.7,D5-8.Graim1.8                                                                                                                             |
| D5-6.1    |              880 | D5-6.Graim2.1,D5-6.Graim2.2                                                                                                                             |
| D5-6.2    |              880 | D5-6.Graim2.3,D5-6.Graim2.4                                                                                                                             |
| D5-6.3    |              880 | D5-6.Graim2.5,D5-6.Graim2.6                                                                                                                             |
| D5_ref    |              880 | D5_ref                                                                                                                                                  |
| D5_2      |              880 | D5_2                                                                                                                                                    |
| D5_4      |              880 | D5_4                                                                                                                                                    |
| D5_31     |              880 | D5_31                                                                                                                                                   |
| D5_53     |              880 | D5_53                                                                                                                                                   |
| D2-2      |              910 | D2-2.HFJ7YBGXX.1,D2-2.HFJ7YBGXX.2,D2-2.HFJ7YBGXX.3,D2-2.HFJ7YBGXX.4,D2-2.HHGLTBGXX.1,D2-2.HHGLTBGXX.2,D2-2.HHGLTBGXX.3,D2-2.HHGLTBGXX.4                 |
| D10-7     |              910 | D10-7.HGF7YALXX.5                                                                                                                                       |
| D10-3     |              910 | D10-3.HG7LFALXX.1                                                                                                                                       |
| D10-8     |              910 | D10-8.HG7LFALXX.1                                                                                                                                       |
| D3-D-27   |              910 | D3-D-27.Gdavi1.1,D3-D-27.Gdavi1.2,D3-D-27.Gdavi1.3,D3-D-27.Gdavi1.4                                                                                     |
| D4-185    |              919 | D4-185.HFJ7YBGXX.1,D4-185.HFJ7YBGXX.2,D4-185.HFJ7YBGXX.3,D4-185.HFJ7YBGXX.4,D4-185.HHGLTBGXX.1,D4-185.HHGLTBGXX.2,D4-185.HHGLTBGXX.3,D4-185.HHGLTBGXX.4 |
| D4-12     |              919 | D4-12.Garid1.1,D4-12.Garid1.2,D4-12.Garid1.3,D4-12.Garid1.4                                                                                             |
| D11-1.21  |              929 | D11-1.Gschw1.1,D11-1.Gschw1.2,D11-1.Gschw1.3,D11-1.Gschw1.4,D11-1.Gschw1.7                                                                              |
| D11-1.113 |              929 | D11-1.Gschw1.5,D11-1.Gschw1.6                                                                                                                           |
| D7-157    |              934 | D7-157.HFJ7YBGXX.1,D7-157.HFJ7YBGXX.2,D7-157.HFJ7YBGXX.3,D7-157.HFJ7YBGXX.4,D7-157.HHGLTBGXX.1,D7-157.HHGLTBGXX.2,D7-157.HHGLTBGXX.3,D7-157.HHGLTBGXX.4 |
| D9-4      |              934 | D9-4.Glaxu1.1,D9-4.Glaxu1.2,D9-4.Glaxu1.3,D9-4.Glaxu1.4,D9-4.Glaxu1.5                                                                                   |
| D7-4      |              934 | D7-4.Globa1.1,D7-4.Globa1.2,D7-4.Globa1.3,D7-4.Globa1.4                                                                                                 |
| F1-1      |             1311 | F1-1                                                                                                                                                    |
| A1-97     |             1667 | A1-97                                                                                                                                                   |
| A2_4      |             1667 | A2_4                                                                                                                                                    |
| A2_34     |             1698 | A2_34                                                                                                                                                   |
| A2_1011   |             1698 | A2_1011                                                                                                                                                 |
| A1-155    |             1698 | A1-155                                                                                                                                                  |
| A2_44     |             1698 | A2_44                                                                                                                                                   |
| A2-JCVI   |             1698 | A2-JCVI                                                                                                                                                 |

Low coverage libraries
| A1-73     |             1667 | A1-73                                                                                                                                                   |
| D2-2-7.S3 |              910 | D2-2-7.Ghark1.1,D2-2-7.Ghark1.2,D2-2-7.Ghark1.3,D2-2-7.Ghark1.4                                                                                         |
| D2-2-7.S7 |              910 | D2-2-7.Ghark1.5,D2-2-7.Ghark1.6,D2-2-7.Ghark1.7,D2-2-7.Ghark1.8                                                                                         |
| D1-2.1    |              841 | D1-2.Gthur1.1,D1-2.Gthur1.2,D1-2.Gthur1.3,D1-2.Gthur1.4                                                                                                 |
| A2-BGI    |             1698 | A2-BGI                                                                                                                                                  |




* libraries seperate

#+HEADER: :shebang #!/bin/bash :tangle sample.sh :mkdirp yes
#+HEADER: :prologue #PBS -N Sample -l walltime=48:00:00 
#+BEGIN_SRC sh :var libs=lib_table
cd $DIR/
ROOT=$(git rev-parse --show-toplevel)

KEYS=("${!libs[@]}")

# Find the longest accession name and set it as the pad length
PAD='______________________________________________________'
PADLENGTH=0
for name in "${KEYS[@]}"; do
    LENGTH=$[ ${#name} ]
    if [ $PADLENGTH -lt $LENGTH ]; then PADLENGTH=$LENGTH; fi
done
PAD=${PAD:0:$PADLENGTH}

printf "Pad Length = %d\n" $PADLENGTH

# #Read through the accession table above, pad the name to the correct length, and sample reads into sampled.fa
for name in "${KEYS[@]}"; do
    readarray -t lib <<<"${libs[$name]}"
 
    LENGTH=${#name}
    NAME="${name}${PAD:$LENGTH}"
    SIZE=$[ ${lib[0]} * 10000 / 85 ]

    #Sample the largest file
    tr ',' '\n' <<<"${lib[1]}" |
        awk '{printf "%s/trim/%s.PE.R1.fq.gz\n%s/trim/%s.SE.R1.fq.gz\n", wd, $0, wd, $0}' wd=$ROOT |
        xargs echo $DIR/reservoir_sample/reservoir_sample  --read_length=85 --name="$NAME" --reservoir_size=$SIZE
#        xargs zcat | awk 'NR%4==2 {sum += length} END {print name, sum/1000/1000/size}' name=$name size=${lib[0]} OFS="\t"
done |
parallel > $DIR/sampled.libraries.fa
#+END_SRC

#+RESULTS:
: Pad Length = 9


#+HEADER: :shebang "#!/bin/bash" :mkdirp t :tangle cluster.sh
#+HEADER: :prologue #PBS -N RepeatExplorer  -l walltime=48:00:00 
#+BEGIN_SRC sh
cd $DIR
ROOT=$(git rev-parse --show-toplevel)

module load singularity-2.4.2

singularity run $DIR/repeatexplorer.squash.img -s $DIR/sampled.libraries.fa \
     -d None -v libraries -k $DIR/RBplantsANDcotton.21.08.fixedDec2016.fasta -f 9

#+END_SRC

* Libraries combined
#+NAME: acc_table
| Accession | Genome Size (Mb) | Name                                                                                                                                                    |
|-----------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------|
| A1-155    |             1698 | A1-155                                                                                                                                                  |
| A1-97     |             1667 | A1-97                                                                                                                                                   |
| A2-JCVI   |             1698 | A2-JCVI                                                                                                                                                 |
| A2_1011   |             1698 | A2_1011                                                                                                                                                 |
| A2_34     |             1698 | A2_34                                                                                                                                                   |
| A2_4      |             1667 | A2_4                                                                                                                                                    |
| A2_44     |             1698 | A2_44                                                                                                                                                   |
| D1-2      |              841 | D1-2.Gthur1.1,D1-2.Gthur1.2,D1-2.Gthur1.3,D1-2.Gthur1.4,D1-2.Gthur1.5,D1-2.Gthur1.6,D1-2.Gthur1.8,D1-2.Gthur1.7                                         |
| D1-35     |              841 | D1-35.Gthur2.1,D1-35.Gthur2.2,D1-35.Gthur2.3,D1-35.Gthur2.4,D1-35.Gthur2.5                                                                              |
| D10-3     |              910 | D10-3.HG7LFALXX.1                                                                                                                                       |
| D10-7     |              910 | D10-7.HGF7YALXX.5                                                                                                                                       |
| D10-8     |              910 | D10-8.HG7LFALXX.1                                                                                                                                       |
| D11-1     |              929 | D11-1.Gschw1.5,D11-1.Gschw1.6,D11-1.Gschw1.1,D11-1.Gschw1.2,D11-1.Gschw1.3,D11-1.Gschw1.4,D11-1.Gschw1.7                                                |
| D2-1-6    |              856 | D2-1-6.Garmo1.1,D2-1-6.Garmo1.2,D2-1-6.Garmo1.3,D2-1-6.Garmo1.4,D2-1-6.Garmo1.5                                                                         |
| D2-2      |              910 | D2-2.HFJ7YBGXX.1,D2-2.HFJ7YBGXX.2,D2-2.HFJ7YBGXX.3,D2-2.HFJ7YBGXX.4,D2-2.HHGLTBGXX.1,D2-2.HHGLTBGXX.2,D2-2.HHGLTBGXX.3,D2-2.HHGLTBGXX.4                 |
| D3-D-27   |              910 | D3-D-27.Gdavi1.1,D3-D-27.Gdavi1.2,D3-D-27.Gdavi1.3,D3-D-27.Gdavi1.4                                                                                     |
| D3-K-57   |              880 | D3-K-57.Gklot1.5,D3-K-57.Gklot1.6,D3-K-57.Gklot1.7,D3-K-57.Gklot1.8                                                                                     |
| D3K-56    |              880 | D3K-56.HFJ7YBGXX.1,D3K-56.HFJ7YBGXX.2,D3K-56.HFJ7YBGXX.3,D3K-56.HFJ7YBGXX.4,D3K-56.HHGLTBGXX.1,D3K-56.HHGLTBGXX.2,D3K-56.HHGLTBGXX.3,D3K-56.HHGLTBGXX.4 |
| D4-12     |              919 | D4-12.Garid1.1,D4-12.Garid1.2,D4-12.Garid1.3,D4-12.Garid1.4                                                                                             |
| D4-185    |              919 | D4-185.HFJ7YBGXX.1,D4-185.HFJ7YBGXX.2,D4-185.HFJ7YBGXX.3,D4-185.HFJ7YBGXX.4,D4-185.HHGLTBGXX.1,D4-185.HHGLTBGXX.2,D4-185.HHGLTBGXX.3,D4-185.HHGLTBGXX.4 |
| D5-6      |              880 | D5-6.Graim2.1,D5-6.Graim2.2,D5-6.Graim2.3,D5-6.Graim2.4,D5-6.Graim2.5,D5-6.Graim2.6                                                                     |
| D5-8      |              880 | D5-8.Graim1.7,D5-8.Graim1.8                                                                                                                             |
| D5_2      |              880 | D5_2                                                                                                                                                    |
| D5_31     |              880 | D5_31                                                                                                                                                   |
| D5_4      |              880 | D5_4                                                                                                                                                    |
| D5_53     |              880 | D5_53                                                                                                                                                   |
| D5_ref    |              880 | D5_ref                                                                                                                                                  |
| D6-5      |              841 | D6-5.Ggoss2.1,D6-5.Ggoss2.2,D6-5.Ggoss2.3,D6-5.Ggoss2.4                                                                                                 |
| D6-7      |              841 | D6-7.Ggoss1.1,D6-7.Ggoss1.2,D6-7.Ggoss1.3,D6-7.Ggoss1.4,D6-7.Ggoss1.5,D6-7.Ggoss1.6                                                                     |
| D7-157    |              934 | D7-157.HFJ7YBGXX.1,D7-157.HFJ7YBGXX.2,D7-157.HFJ7YBGXX.3,D7-157.HFJ7YBGXX.4,D7-157.HHGLTBGXX.1,D7-157.HHGLTBGXX.2,D7-157.HHGLTBGXX.3,D7-157.HHGLTBGXX.4 |
| D7-4      |              934 | D7-4.Globa1.1,D7-4.Globa1.2,D7-4.Globa1.3,D7-4.Globa1.4                                                                                                 |
| D8-8      |              851 | D8-8.Gtril2.1                                                                                                                                           |
| D8-9      |              851 | D8-9.Gtril1.1,D8-9.Gtril1.2                                                                                                                             |
| D9-4      |              934 | D9-4.Glaxu1.1,D9-4.Glaxu1.2,D9-4.Glaxu1.3,D9-4.Glaxu1.4,D9-4.Glaxu1.5                                                                                   |
| F1-1      |             1311 | F1-1                                                                                                                                                    |


#+HEADER: :shebang #!/bin/bash :tangle sample.acc.sh :mkdirp yes
#+HEADER: :prologue #PBS -N Sample -l walltime=48:00:00 
#+BEGIN_SRC sh :var libs=acc_table
cd $DIR/
ROOT=$(git rev-parse --show-toplevel)

KEYS=("${!libs[@]}")

# Find the longest accession name and set it as the pad length
PAD='______________________________________________________'
PADLENGTH=0
for name in "${KEYS[@]}"; do
    LENGTH=$[ ${#name} ]
    if [ $PADLENGTH -lt $LENGTH ]; then PADLENGTH=$LENGTH; fi
done
PAD=${PAD:0:$PADLENGTH}

printf "Pad Length = %d\n" $PADLENGTH

# #Read through the accession table above, pad the name to the correct length, and sample reads into sampled.fa
for name in "${KEYS[@]}"; do
    readarray -t lib <<<"${libs[$name]}"
 
    LENGTH=${#name}
    NAME="${name}${PAD:$LENGTH}"
    SIZE=$[ ${lib[0]} * 10000 / 85 ]

    #Sample the largest file
    tr ',' '\n' <<<"${lib[1]}" |
        awk '{printf "%s/trim/%s.PE.R1.fq.gz\n%s/trim/%s.SE.R1.fq.gz\n", wd, $0, wd, $0}' wd=$ROOT |
        xargs echo $DIR/reservoir_sample/reservoir_sample  --read_length=85 --name="$NAME" --reservoir_size=$SIZE
#        xargs zcat | awk 'NR%4==2 {sum += length} END {print name, sum/1000/1000/size}' name=$name size=${lib[0]} OFS="\t"
done |
parallel > $DIR/sampled.accessions.fa
#+END_SRC

#+RESULTS:
: Pad Length = 7


#+HEADER: :shebang "#!/bin/bash" :mkdirp t :tangle cluster.acc.sh
#+HEADER: :prologue #PBS -N RepeatExplorer  -l walltime=48:00:00 
#+BEGIN_SRC sh
cd $DIR
ROOT=$(git rev-parse --show-toplevel)

module load singularity-2.4.2

singularity run $DIR/repeatexplorer.squash.img -s $DIR/sampled.accessions.fa \
     -d None -v accessions -k $DIR/RBplantsANDcotton.21.08.fixedDec2016.fasta -f 7

#+END_SRC


* Post clustering analysis
#+HEADER: :shebang "#!/usr/bin/perl" :results output :tangle annotate.pl
#+BEGIN_SRC perl :var DIR=(file-name-directory buffer-file-name)
use strict;
use warnings;

use Data::Dumper;

local $\ = "\n";
local $, = "\t";

# Use file analysis/clustering/seqClust/clustering/RM-custom_output_tablesummary.csv
my $cluster_file = shift;

open(my $cluster_fh, $cluster_file);

my $header = <$cluster_fh>;
chomp $header;
$header = [split /\t/, $header];
splice @$header, 0, 3;

print "Cluster", "Lineage";

while(<$cluster_fh>){
     next unless s/^hits //;
     chomp;

     my ($cluster, $length, $sum, $tmp) = split /\t/, $_, 4;
     my $repeats = {};
     @$repeats{@$header} = map {s/\s//g; $_} split /\t/, $tmp;

     $cluster =~ s#clusters/dir_([^/]*)/#$1#;

     # Combine 'gypsy' and 'LTR/Gypsy' elements
     $repeats->{'LTR/Gypsy'} += $repeats->{gypsy};
     delete $repeats->{'gypsy'};

     # Remove 'Unknown' elements
     delete $repeats->{Unknown};

     # Sort elements descending by count 
     my $sort_header = [sort {$repeats->{$b} <=> $repeats->{$a}} keys %$repeats];

     # Check if first element is 'LTR'
     if($sort_header->[0] eq 'LTR'){
         # If second element is an LTR and third element is not LTR or is less
         # than half the second, add the first and second elements together and
         # remove the LTR element
         if ($sort_header->[1] =~ /^LTR/){
             if($sort_header->[2] !~ /^LTR/ || 
                $repeats->{$sort_header->[1]}/2 > $repeats->{$sort_header->[2]}){
                 
                 $repeats->{$sort_header->[1]} += $repeats->{LTR};
                 delete $repeats->{LTR};
             }
         # If second element is non-LTR and is larger than half the LTR,
         # classify cluster as Retroelement
         }elsif($sort_header->[1] eq 'non-LTR_retroposon' && 
                $repeats->{$sort_header->[0]}/2 < $repeats->{$sort_header->[1]}){
             print $cluster, 'Retroelement';
             next;
         }
     }else{
         # Remove LTR if not first element
         delete $repeats->{LTR};
     }
     # Resort elements
     $sort_header = [sort {$repeats->{$b} <=> $repeats->{$a}} keys %$repeats];

     # IF the top two elements are LTR, they're close in size, and are larger
     # than 10% of the cluster, classify cluster as 'LTR'
     if($sort_header->[0] =~ /^LTR/ && $sort_header->[1] =~ /^LTR/ && 
        $repeats->{$sort_header->[0]}/2 < $repeats->{$sort_header->[1]} &&
        ($repeats->{$sort_header->[0]}+$repeats->{$sort_header->[1]})/$sum > .1){
         print $cluster, 'LTR';
         next;
     }

     # If the first element is 'DNA' and the second element is a DNA element,
     # add the elements together and delete the DNA element
     if($sort_header->[0] eq 'DNA'){
         if ($sort_header->[1] =~ /^DNA/){
                 $repeats->{$sort_header->[1]} += $repeats->{DNA};
                 delete $repeats->{DNA};
         }
     }else{
         # Remove DNA if not first element
         delete $repeats->{DNA};
     }
     # Resort elements
     $sort_header = [sort {$repeats->{$b} <=> $repeats->{$a}} keys %$repeats];


     # If top element is larger than 10% total count and is 1.5x larger than
     # second element, classify cluster as the top element; else leave the
     # cluster unclassified (*).
     if($repeats->{$sort_header->[0]}/$sum > .1 && 
        $repeats->{$sort_header->[0]}/($repeats->{$sort_header->[1]}+1) > 1.5){
         print $cluster,  $sort_header->[0];
     }else{
         print $cluster, '*';
     }

}
close($cluster_fh);
#+END_SRC

#+BEGIN_SRC sh :var DIR=(file-name-directory buffer-file-name)
  perl annotate.pl seqClust/clustering/RM-custom_output_tablesummary.csv |
     paste - seqClust/clustering/comparativeAnalysis_table_clusters_counts.csv \
     > comparative_analysis_counts.annotated.txt
#+END_SRC

#+RESULTS:

#+HEADER: :shebang "#!/usr/bin/perl" :results output :tangle TE_dating_histogram.pl
#+BEGIN_SRC perl

local $\ = "\n";
local $, = "\t";

# Defaluts from repeatexplorer
my $PID = 90;
my $OVL = 0;
my $SCOV = 0;
my $LCOV = 55;

my $prev;
my $histo = {};
while(<>){
    # Parse mgblast output
    next if m/^#/;
    my ($id, $long, $short, $pid, $score) = ([], {}, {}, 0, 0);
    ($id->[0], @$long{qw/length start stop/}, $id->[1], @$short{qw/length start stop/}, $pid, $score) = split;

    # Skip self-hits
    next if $id->[0] eq $id->[1];

    # next unless ( $id->[0] =~ m/(kokia|kirkii)/ || $id->[1] =~ m/(kokia|kirkii)/ );

    # filter minimum overlap
    $_->{overlap} = abs($_->{start} - $_->{stop}) +1 foreach ($long, $short);
    next unless (($long->{overlap} >= $OVL || $short->{overlap} >= $OVL) && $pid >= $PID);

    # filter minimum coverage
    $_->{cov} = $_->{overlap}*100.0/$_->{length} foreach ($long, $short);
    ($short, $long) = ($long, $short) if($short->{length} > $long->{length});
    next unless ($short->{cov} >= $SCOV && $long->{cov} >=$LCOV);

    # Skip lower HSPs from same Hit
    $id = join("\t", sort @$id);
    next if $prev && $prev eq $id;
    $prev = $id;

    $histo->{$pid}++;
}

#Print histogram
foreach my $pid (sort {$a <=> $b} keys %$histo){
    print $pid, $histo->{$pid};
}
#+END_SRC

#+HEADER: :shebang #!/bin/bash :tangle te_dating.sh :mkdirp yes
#+BEGIN_SRC sh :var DIR=(file-name-directory buffer-file-name)
PATH=$PATH:./repeatexplorer/tgicl_linux/bin:/usr/local/R-3.2.3/bin/

R -e 'sessionInfo()'
#R#  version 3.2.3 (2015-12-10)
# Platform: x86_64-pc-linux-gnu (64-bit)
# Running under: CentOS release 6.6 (Final)

# locale:
#  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
#  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
#  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
#  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
#  [9] LC_ADDRESS=C               LC_TELEPHONE=C
# [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

# attached base packages:
# [1] stats     graphics  grDevices utils     datasets  methods   base


RCMD=$(cat <<'EOF'
args <- commandArgs(trailingOnly = TRUE)

# READ HISTOGRAM
d<-read.table(args[1])

# Fit linear and quadratic model
line<-lm(V2~V1, data=d)
quad<-lm(V2~poly(V1,2), data=d)

l <- quad
category <- 0

# Find best fit using Bayesian Information Criterion and categorize repeat
# cluster based on doi:10.1186/s12864-016-3234-9

if(BIC(line) < BIC(quad)){
    l <- line
    if(l$coefficients[2] > 0.001){
        category <- 1
    } else if (l$coefficients[2] < 0.001 && l$coefficients[2] > -0.001)  {
        category <- 2
    } else if (l$coefficients[2] < -0.001) {
        category <- 3
    }
} else {
    opti <- d[which.max(fitted(l)),1]
    
    if(l$coefficients[3] > 0){
        category <- 4
        if(l$coefficients[2]<0){
            category <- "4*"
        }
    } else  {
        if(opti < 99) {
            category <- 5
        } else {
            category <- 6
        }

    }

}

# Graph histogram and best fit model
png(file.path(dirname(args[1]), "TE_dating.png"))
plot(d)
lines(d$V1, fitted(l))
invisible(dev.off())

# Output data for table
cluster <- sub(".*dir_", "", dirname(args[1]))
cat(sprintf("%s\t%f\t%f\t%f\t%d\t%s\n",
            cluster,
            l$coefficients[1],
            l$coefficients[2],
            l$coefficients[3],
            d[which.max(fitted(l)),1],
            category))
EOF
)


# Run mgblast exactly like repeatexplorer on the reads for each cluster, create
# a histogram of % identity, and categorize them with R script above
find seqClust/clustering/clusters/ -name reads.fas |
    sort |
    while read file; do
        formatdb -p F -i $file
        cat $file |
            parallel --block 100k --recstart '>' --pipe \
                     mgblast -d $file -p85 -W18 -UT -X40 -KT -JF -F '"m D"' -v100000000 -b100000000 -D4 -C 55 -H30 |
            ./TE_dating_histogram.pl > $(dirname $file)/TE_dating.hist
        Rscript  - <<<"$RCMD"  $(dirname $file)/TE_dating.hist
    done |
    awk 'BEGIN {print "Cluster\ta\tb\tc\tOptimum\tCategory"} 
        {print}' OFS="\t" \
        > TE_dating.txt
#+END_SRC


# Cluster cutoff graph
#+BEGIN_SRC R
library(ggplot2)

data <- read.delim("analysis/clustering/seqClust/clustering/comparativeAnalysis_table_clusters_counts.csv")
data$size <- rowSums(data[,-1])
data$percent <- cumsum(data$size)/sum(data$size)

ggplot(data, aes(x=cluster, y=percent)) +
     geom_line() +
     geom_vline(xintercept=274, color='red') +
     scale_x_log10() + scale_y_log10()
ggsave('analysis/clustering/seqClust/clustering/dim_returns.cutoff.png')
#+END_SRC
